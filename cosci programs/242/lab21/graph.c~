#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"
#include "graph.h"
#include "queue.h"

typedef enum { UNVISITED, VISITED_SELF, VISITED_DESCENDANTS } state_t;

struct vertex {
    int index;
    int predecessor;
    int distance;
    state_t state;
    int finish;
};

struct graphrec {
    int size;
    int **edges;
    vertex *vertices;
};


graph graph_new(int num_vertices){
    graph g = emalloc(sizeof *g);
    int i, j;
    g->size = num_vertices;
    g->edges = emalloc(g->size * sizeof g->edges[0]);
    for(i=0; i < g->size; i++){
        g->edges[i] = emalloc(g->size * sizeof g->edges[0][0]);
        for(j=0; j < g->size; j++){
            g->edges[i][j] = 0;
        }
    }
    /* Initialise vertices */
    g->vertices = emalloc(g->size * sizeof g->vertices[0]);
    for(i = 0; i < g->size; i++){
        g->vertices[i].index = i;
        g->vertices[i].predecessor = -1;
        g->vertices[i].distance = -1;
        g->vertices[i].state = UNVISITED;
        g->vertices[i].finish = 0;   
    }
    return g;
}

void graph_add_edge(graph g, int a, int b, int directed){
    g->edges[a][b] = 1;
    /* undirected: */   
    if(directed == 0){
        g->edges[b][a] = 1;
    }
}

void graph_bfs(graph g, int source){
    int i;
    int u;
    vertex *v = &g->vertices[source];
    queue q = queue_new(g->size);
    for (i=0; i < g->size; i++){
        g->vertices[i].state = UNVISITED;
        g->vertices[i].distance = -1;
        g->vertices[i].predecessor = -1;
    }
    v->state = VISITED_SELF;
    v->distance = 0;
    enqueue(q, v->index);
    do{
        u = dequeue(q);
        for(i=0; i < g->size; i++){
            if(g->edges[u][i] == 1 &&
               g->vertices[i].state == UNVISITED){
                g->vertices[i].state = VISITED_SELF;
                g->vertices[i].distance = 1 + g->vertices[u].distance;
                g->vertices[i].predecessor = u;
                enqueue(q, i);
            }
            g->vertices[u].state = VISITED_DESCENDANTS;
        }
    } while(queue_size(q) != 0);
  
}

static int visit(graph g, int source, int step){
    int u;
    vertex *v = &g->vertices[source];
    v->state = VISITED_SELF;
    v->distance = ++step;
    for(u = 0; u < g->size; u++){
        if(g->edges[source][u] == 1 &&
           g->vertices[u].state == UNVISITED){
            g->vertices[u].predecessor = source;
            step = visit(g, u, step);
        }
    }
    step++;
    v->state = VISITED_DESCENDANTS;
    v->finish = step;
    return step;
}

void graph_dfs(graph g){
    int i, step;
    for(i = 0; i < g->size; i++){
        g->vertices[i].state = UNVISITED;
        g->vertices[i].predecessor = -1;
    }
    step = 0;
    for(i=0; i < g->size; i++){
        if(g->vertices[i].state == UNVISITED){
            step = visit(g, i, step);
        }
    }
}




void graph_print(graph g){
    int i, j, k, comma;
    printf("adjacency list: \n");
    for(i=0; i < g->size; i++){
        printf("%d | ", i);
        for(j=0; j < g->size; j++){
            if(g->edges[i][j] == 1){
                printf("%d", j);
                comma = 0;
                /* lookahead whether use comma */
                for(k = j+1; k < g->size; k++){
                    if(g->edges[i][k] == 1){
                        comma = 1;
                    }
                }
                if(comma == 1){
                    printf(",");
                }
                printf(" ");
            }
        }
        printf("\n");

    }

    printf("\nvertex distance pred finish\n");
    for(i=0; i < g->size; i++){
        printf("%5d%8d%5d%6d\n", i,
               g->vertices[i].distance,
               g->vertices[i].predecessor,
               g->vertices[i].finish);
    }
}

graph graph_free(graph g){
    int i;
    for (i=0; i < g->size; i++){
        free(g->edges[i]);
    }
    free(g->edges);
    free(g->vertices);
    free(g);
    return g;
}

