package week10;

import java.util.*;

/**
 * Skeleton of the recursive implementation of a general tree.
 * 
 * @author Michael Albert edited by Jeremy Haakma
 * @param <T> The type of values stored in the tree.
 */
public class Tree<T> {
    /** rootValue: element at the root of the tree of type T. */
    private T rootValue;
    /** children: List of child trees. */
    private List<Tree<T>> children;

    /** Constructor which takes a root value and list of child trees.
     * @param rootValue value.
     * @param children List of children.
     */
    public Tree(T rootValue, List<Tree<T>> children) {
        this.rootValue = rootValue;
        this.children = children;
    }
    /** Constructor which takes a root value and no children.
     * @param rootValue value.
     */
    public Tree(T rootValue) {
        this(rootValue, new ArrayList<Tree<T>>());
    }

    /** Method which returns the total number of nodes
     * in the tree.
     * @return int number of nodes in tree
     */
    public int size() {
        int s = 1;
        for (Tree<T> t : children){
            s += t.size();
        }
        return s;
    }
    /** Method which returns the maximum number of children any
     * node in this tree has.
     @return int childCount
     */
    public int maxDegree() {
        int degree = children.size();
        for (Tree<T> t : children){
            if (t.maxDegree() > degree){
                degree = t.maxDegree();
            }
        }
        return degree;
    }
    /** Adds new Tree to the root of the current tree.
     * @param child child tree.
     */
    public void add(Tree<T> child) {
        children.add(child);
    }
    
    /** Finds a Tree with root value of the parameter.
     * @param value item searched for
     * @return Tree<T> tree with root of searched item
     */
    public Tree<T> find(T value) {
        if (rootValue.equals(value)) {
            return this;
        }
        for (Tree<T> child : children) {
            Tree<T> match = child.find(value);
            if (match != null) {
                return match;
            }
        }
        return null;
    }
    /** Method which returns an ArrayList of every node in
     * the current tree, sorted by Post Order traversal.
     * @return List<T> the list of each item
     */
    public List<T> postOrder() {
        ArrayList<T> output = new ArrayList<T>();
        for (Tree<T> t : children){
            output.addAll(t.postOrder());
        }
        output.add(this.rootValue);
        return output;
    }
    /** toString returns tree as a String of its node values.
     * @return String string representation of tree
     */
    public String toString() {
        if (children.isEmpty()) {
            return rootValue.toString();
        }
        return rootValue.toString() + ' ' + children.toString();
    }
    /** Method which prints the contents of a tree as an indented String.
     * @return String string representation of tree
     */
    public String toIndentedString() {
        String output = rootValue.toString() + "\n";
        for (Tree<T> t : children){
            String[] lines = t.toIndentedString().split("\n");
            for (String s : lines){
                output += "  " + s + "\n";
            }
        }
        return output;
    }

    /** A helper method for testing (used by main).  Searches tree for
     *  the given target and adds white space separated children to
     *  the tree matching target if there is one.
     *
     * @param target the root value to seach for.
     * @param children a white space separated list of children to add
     * to the tree whose value matches target.
     */
    private static void addChildren(String target, String children) {
        Tree<String> parent = tree.find(target);
        if (parent != null) {
            for (String child : children.split(" ")) {
                parent.add(new Tree<>(child));
            }
        }
    }

    /** A tree instance used for testing. */
    private static Tree<String> tree;

    /**
     * Entry point of the program (used for testing).
     *
     * @param args command line arguments are not used.
     */
    public static void main(String[] args) {
        System.out.println("Creating tree\n-------------");
        tree = new Tree<>("food");
        System.out.print(tree + "\nsize: " + tree.size());
        System.out.println(", max degree: " + tree.maxDegree());
        System.out.println("\nAdding children\n----------------");
        addChildren("food", "meat fruit vegetable");
        System.out.print(tree + "\nsize: " + tree.size());
        System.out.println(", max degree: " + tree.maxDegree());
        System.out.println("\nAdding deeper children\n----------------------");
        addChildren("meat", "chicken beef fish");
        addChildren("fish", "salmon cod tuna shark");
        addChildren("vegetable", "cabbage");
        System.out.print(tree + "\nsize: " + tree.size());
        System.out.println(", max degree: " + tree.maxDegree());
        System.out.println("\nPostorder\n---------");
        System.out.println(tree.postOrder());
        System.out.println("\nIndented string\n---------------");
        System.out.print(tree.toIndentedString());
    }

}
