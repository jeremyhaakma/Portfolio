package week09;

import java.util.Scanner;
/** RPNApp calculates output based on Reverse Polish Notation.
 * @author Jeremy Haakma and Scott Wyngaarden
 */

public class RPNApp {


    /** main.*/
    public static void main (String[] args){
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        
        System.out.println(calculate(input));
    }//end main

    
    /** calculate input.*/
    private static String calculate (String input){
        RPNStack stack = new RPNStack();
        Scanner scan = new Scanner(input);
        long x;
        long y;//second input, popped first
        String output = "";
        while (scan.hasNext()){
            if (scan.hasNextLong()){
                stack.push(scan.nextLong());
            } else {
                String operation = scan.next();
                switch (operation) {
                case "+":
                    if (stack.size() < 2){
                        return "Error: too few operands";
                    } else {
                        y = stack.pop();
                        x = stack.pop();
                        stack.push(x+y);
                    }
                    break;
                case "-":
                    if (stack.size() < 2){
                        return "Error: too few operands";
                    } else {
                        y = stack.pop();
                        x = stack.pop();
                        stack.push(x-y);
                    }
                    break;
                case "*":
                    if (stack.size() < 2){
                        return "Error: too few operands";
                    } else {
                        y = stack.pop();
                        x = stack.pop();
                        stack.push(x*y);
                    }
                    break;
                case "/":
                    if (stack.size() < 2){
                        return "Error: too few operands";
                    } else {
                        y = stack.pop();
                        x = stack.pop();
                        if (y== 0){
                            return "Error: division by 0";
                        }
                        stack.push(x/y);
                    }
                    break;
                case "%":
                    if (stack.size() < 2){
                        return "Error: too few operands";
                    } else {
                        y = stack.pop();
                        x = stack.pop();
                        stack.push(x%y);
                    }
                    break;
                default: return "Error: bad token '" + operation + "'";
                }

                
            }
            
        }
        for (int i = 0; i < stack.size(); i++){
            output = output + Long.toString(stack.stackArray[i]);
            if (i < stack.size()-1){
                output = output + ", ";
            }
        }
        return "[" +output+ "]";
    }//end createStack 



    
}//end class
