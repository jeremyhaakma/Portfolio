package week09;

import java.util.Scanner;
import java.util.Stack;
/** RPNApp calculates output based on Reverse Polish Notation.
 * @author Jeremy Haakma and Scott Wyngaarden
 */

public class RPNApp {
    static Stack<Long> stack = new Stack<Long>();
  
  
    /** main.*/
    public static void main (String[] args){
    
        Scanner sc = new Scanner(System.in);
    
        while(sc.hasNextLine()){            
      
            String line = sc.nextLine();
      
            if (line.equals("exit")){
                break;
            }
            Stack<Long> inCalc = calculate(line);
            if (inCalc != null){
                System.out.println(inCalc.toString());
            }
            stack = new Stack<Long>();
        }
    }//end main
  
  
  
  
  
    /** calculate input.*/
    private static Stack<Long> calculate (String input){
    
        Scanner scan = new Scanner(input);
        long x;
        long y;//second input, popped first
        String output = "";
        while (scan.hasNext()){
            if (scan.hasNextLong()){
                stack.push(scan.nextLong());
            }else {
                String operation = scan.next();
                //operands
                switch (operation) {
          
                    case "bracketsError":
                        System.out.println("Error: unmatched parentheses");
                        return null;
            
                        //single operands
                    case "+":
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            y = stack.pop();
                            x = stack.pop();
                            stack.push(x+y);
                        }
                        break;
                    case "-":
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            y = stack.pop();
                            x = stack.pop();
                            stack.push(x-y);
                        }
                        break;
                    case "*":
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            y = stack.pop();
                            x = stack.pop();
                            stack.push(x*y);
                        }
                        break;
                    case "/":
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            y = stack.pop();
                            x = stack.pop();
                            if (y== 0){
                                System.out.println("Error: division by 0");
                                return null;
              
                            }
                            stack.push(x/y);
                        }
                        break;
                    case "%":
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            y = stack.pop();
                            x = stack.pop();
                            stack.push(x%y);
                        }
                        break;
          
                        // repeat operands
                    case "+!" :
            
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            while (stack.size() > 1){
                                y = stack.pop();
                                x = stack.pop();
                                stack.push(x+y);
                            }
                        }
                        break;
          
                    case "-!" :
            
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            while (stack.size() > 1){
                                y = stack.pop();
                                x = stack.pop();
                                stack.push(x-y);
                            }
                        }
                        break;
          
                    case "*!" :
            
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            while (stack.size() > 1){
                                y = stack.pop();
                                x = stack.pop();
                                stack.push(x*y);
                            }
                        }
                        break;
          
                    case "/!" :
            
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            while (stack.size() > 1){
                                y = stack.pop();
                                x = stack.pop();
                                stack.push(x/y);
                            }
                        }
                        break;
          
                    case "%!" :
            
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            while (stack.size() > 1){
                                y = stack.pop();
                                x = stack.pop();
                                stack.push(x%y);
                            }
                        }
                        break;
          
                        //copying, duplicating etc
                    case "d":
                        if (stack.size() <1){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            stack.push(stack.peek());
                        }
                        break;
          
                    case "o":
                        if (stack.size() <1){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            System.out.print(stack.peek() + " ");
            
                        }
                        break;
          
                    case "c" :
                        if (stack.size() < 2){
                            System.out.println("Error: too few operands");
                            return null;
                        } else {
                            long c = stack.pop();
                            long n = stack.pop();
                            if (c<0){
                                System.out.println("Error: negative copy");
                                return null;
                            }
                            for (int i = 0; i < c; i++){
                                stack.push(n);
                            }
                        }
                        break;
          
                    case "r":
                        if (stack.empty()){
                            System.out.println("Error: too few operands");
                            return null;
                        }else{
                            long k = stack.pop();//k-1 = places back to move n
                            long n = stack.pop();//item to be moved
                            Stack<Long> kStack = new Stack<Long>();//stack to place removed items
                            if (k-1 > stack.size()){
                                System.out.println("Error: too few operands");
                                return null;
                            } else if (k <0){
                                System.out.println("Error: negative roll");
                                return null;
              
                            }else {
                                for (int i = 0; i < k-1; i++){
                                    kStack.push(stack.pop());
                                }
                                stack.push(n);
                                for (int i = 0; i< k-1; i++){
                                    stack.push(kStack.pop());
                                }
                            }
                        }
                        break;
          
                    case "(":
                        String inPString = "";
                        boolean matchedParentheses = false;
                        if (stack.isEmpty()){
                            System.out.println("Error: too few operands");
                            return null;
                        }
                        Long multiplier = stack.pop();
            
                        int pNum = 1;
                        for (int i = 0; i < multiplier; i++){
                            while (scan.hasNext()){
                                String nextItem = scan.next();
                                if (nextItem.equals("(")){
                                    pNum++;
                                }
                                if (nextItem.equals(")")){
                                    pNum--;
                                    if (pNum == 0){
                                        break;
                                    } else {
                                        inPString = inPString + " " + nextItem;
                                    }
                                } else{
                                    inPString = inPString + " " + nextItem;
                                }
                
                            }
                            if (pNum != 0){
                                System.out.println("Error: unmatched parentheses");
                                return null;
                            }
            
                            calculate(inPString);
                        }
                        break;//end case "("

                    case ")" :
                        System.out.println("Error: unmatched parentheses");
                        return null;
                      

                    default: 
                        System.out.println("Error: bad token '" + operation + "'");
                        return null;
                }//end switch                
            }//end if else       
        }//end while
    
    
        return stack;
    }//end createStack 
  
  
  
  
}//end class
