/**
 * COSC242 Lab 23
 * Rory Mearns (ID.3928873)
 */

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include "mylib.h"
#include "queue.h"
#include "graph.h"

static int step;

/**
 * Defines possible types for the state of a vert.
 */
typedef enum { UNVISITED, VISITED_SELF, VISITED_DESCENDANTS } state_t;

struct graphrec {
  int size;
  int **edges;
  int *predecessor;
  int *distance;
  state_t *state;
  int *finish;

};

/**
 * Creates a new graph.
 *
 * @param vertices Int number of vertices the graph has.
 * @return graph Empty graph.
 */
graph graph_new(int vertices) {
  int i, k;

  graph result = emalloc(sizeof *result);
  result->size = vertices;
  result->edges = emalloc(result->size * sizeof result->edges[0]);
  result->predecessor = emalloc(result->size * sizeof result->predecessor[0]);
  result->distance = emalloc(result->size * sizeof result->distance[0]);
  result->state = emalloc(result->size * sizeof result->state[0]);
  result->finish = emalloc(result->size * sizeof result->finish[0]);

  for (i = 0; i < vertices; i++) {
    result->edges[i] = emalloc(result->size * sizeof result->edges[0][0]);

    for (k = 0; k < vertices; k++) {
      result->edges[i][k] = 0;
    }

    result->predecessor[i] = -1;
    result->distance[i] = -1;
    result->state[i] = UNVISITED;
    result->finish[i] = -1;
  }

  return result;
}

/**
 * Add an edge to a graph
 *
 * @param g Graph which edge will be added to.
 * @param a Int representing the vertex the edge is coming from.
 * @param b Int representing the vertex the edge is going to.
 * @param directed Int to determine if the graph is a directed 
 * graph or an directed graph: 1 = directed, 0 = undirected.
 */
void graph_add_edge(graph g, int a, int b, int directed) {
  if (directed) {
    g->edges[a][b] = 1;
  } else {
    g->edges[a][b] = 1;
    g->edges[b][a] = 1;
  }
}

/**
 * Print an entire graph 
 *
 * @param g Graph to be printed.
 */
void graph_print(graph g) {
  int i, k;

  printf("Adjacency List:\n");
  for (i = 0; i < g->size; i++) {
    printf("%d | ", i);
    for (k = 0; k < g->size; k++) {
      if (g->edges[i][k] == 1) {
	printf("%d, ", k);
      }
    }
    printf("\n");
  }

  printf("Vertex  Distance  Pred  Finish\n");
  for (i = 0; i < g->size; i++) {
    printf("%4d %7d %8d %6d\n", i, g->distance[i], g->predecessor[i], g->finish[i]);
  }
}

/**
 * Breadth First Search 
 *
 * @param g Graph to be searched.
 * @param source Int vertex to start the search from. */
void graph_bfs(graph g, int source) {
  int i, u, v;
  queue q = queue_new();

  /* For each vertex in the graph */
  for (i = 0; i < g->size; i++) {
    g->state[i] = UNVISITED;
    g->distance[i] = INT_MAX;
    g->predecessor[i] = -1;
  }

  g->state[source] = VISITED_SELF;
  g->distance[source] = 0;
  enqueue(q, source);

  while (queue_size(q) > 0) {
    u = dequeue(q);
    /* For each vertex 'v' adjacent to 'u' that hasn't been visited */
    for (v = 0; v < g->size; v++) {
      if (g->edges[u][v] == 1 && g->state[v] == UNVISITED) {
	g->state[v] = VISITED_SELF;
	g->distance[v] = 1 + g->distance[u];
	g->predecessor[v] = u;
	enqueue(q, v);
      }
    }
    g->state[u] = VISITED_DESCENDANTS;
  }
}

/**
 * Depth First Search Visit Vertex 
 *
 * @param g Graph being searched.
 * @param v Int vertex being visited.
 */
void visit(int v, graph g) {
  int u;
  g->state[v] = VISITED_SELF;
  step++;
  g->distance[v] = step;
  /* For each vertex 'u' adjacent to vertex 'v' */
  for (u = 0; u < g->size; u++) {
    if (g->edges[v][u] == 1 && g->state[u] == UNVISITED) {
      g->predecessor[u] = v;
      visit(u,g);
    }
  }
  step++;
  g->state[v] = VISITED_DESCENDANTS;
  g->finish[v] = step;
}

/**
 * Depth First Search 
 *
 * @param g Graph to be searched.
 */
void graph_dfs(graph g) {
  int v;
  /* For each vertex 'v' in the graph */
  for (v = 0; v < g->size; v++) {
    g->state[v] = UNVISITED;
    g->predecessor[v] = -1;
  }
  step = 0;
  /* For each vertex 'v' in the graph */
  for (v = 0; v < g->size; v++) {
    if (g->state[v] == UNVISITED) {
      visit(v, g);
    }
  }
}

/**
 * Free all memory associated with a graph.
 *
 * @param g Graph to be freed.
 * @return g Empty graph pointer.
 */
graph graph_free(graph g) {
  int i;

  for (i = 0; i < g->size; i++) {
    free(g->edges[i]);
  }
  free(g->finish);
  free(g->state);
  free(g->distance);
  free(g->predecessor);
  free(g->edges);
  free(g);
  return g;
}

