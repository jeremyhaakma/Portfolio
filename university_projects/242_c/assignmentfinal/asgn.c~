#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include "mylib.h"
#include "htable.h"
#include "getopt.h"
#include "container.h"

#define DEFAULT_CAPACITY 3877

/**
 * Main method for calling a word comparison function.
 * Reads a file given on command line into an htable. Behaviour can be altered
 * via getopt command line arguments. Function then compares words received
 * from stdin against words in the htable, if a word is not present, it is
 * printed to stdout.
 *
 * @param argc number of arguments on command line.
 * @param argv first argument is text file to read in to the htable.
 * @return exit status.
 */
int main(int argc, char **argv) {

    /*htable variables*/
    htable h;
    container_t htable_type = FLEX_ARRAY;
    int htable_size = DEFAULT_CAPACITY;
    /*input reading variables*/
    char *filename;
    FILE *file;
    char word[256];
    /*getopt variables*/
    const char *optstring = "rs:pih";
    char option;
    /*printing option variables, used like booleans; 0 FALSE, 1 TRUE*/
    int to_print_htable = 0;
    int to_print_info = 0;
    /*information variables*/
    int num_unknown = 0;
    double fill_time = 0;
    double search_time = 0;
    /*Help message*/
    char *help_message = "\nUsage: %s <filename>.txt\n\n"
        "May also add options after the file name\n"
        "e.g. '%s <filename>.txt -r'\n"
        "Options include:\n"
        "-r for using a robust chaining method.\n"
        "-s <tablesize> to alter the table size.\n"
        "-p to print contents of containers.\n"
        "-i to print program run time info.\n"
        "-h for how to use the program.\n\n"
        "Program then compares words from stdin to\n"
        "the words contained in the file given.\n"
        "If a word is not present in the file, it\n"
        "is printed to stderr.\n\n";
    
    /*Check to see if a filename given (more than one command line argument*/
    if(argc < 2){
        fprintf(stderr, "Invalid program call.\n");
        fprintf(stderr, help_message, argv[0], argv[0]);
        exit(EXIT_FAILURE);
    }else{
        /*getopt alters order of argv, so save copy of filename here*/
        filename = argv[1];
    }

    /*check for switch options*/
    while ((option = getopt(argc, argv, optstring)) != EOF){
        switch (option) {
            case 'r':
                /*Option -r*/
                htable_type = RED_BLACK_TREE;
                break;
            case 's':
                /*Option -s*/
                /*'optarg' is the variable associated with '-s'*/
                htable_size = atoi(optarg);
                break;
            case 'p':
                /*Option -p*/
                to_print_htable = 1;
                break;
            case 'i':
                /*Option -i*/
                to_print_info = 1;
                break;
            case 'h':
                /*Option -h*/
                fprintf(stderr, help_message, argv[0], argv[0]);
                exit(EXIT_SUCCESS);
            default:
                fprintf(stderr, help_message, argv[0], argv[0]);
                exit(EXIT_FAILURE);
        }
    }

    /*initialise the htable based off the arguments given*/
    h = htable_new(htable_size, htable_type); 
 
    /*try to open the file given by the user*/
    file = fopen(filename, "r");
    if(file == 0){
        printf("Could not open file: %s\n", filename);
        exit(EXIT_FAILURE);
    }else{
        /*read words from file into our containers. Time this.*/
        clock_t start, end;
        start = clock();
        while(getword(word, sizeof word, file) != EOF){    
            htable_insert(h, word);                
        }
        end = clock();
        fill_time = (end - start)/(double)CLOCKS_PER_SEC;
    }
    fclose(file);
    
    /*if htable print option given on commandline*/
    if(to_print_htable == 1){
        htable_print(h);   
    }else{
        clock_t start, end;
        start = clock();
        while(getword(word, sizeof word, stdin) != EOF){
            if(htable_search(h, word) == 0){
                fprintf(stderr, "%s\n", word);
                num_unknown++;
            }
        }
        end = clock();
        search_time = (end - start)/(double)CLOCKS_PER_SEC;

        /*if info print option given on the commandline*/
        if(to_print_info == 1){
            fprintf(stderr, "Fill time :  %f\n", fill_time);
            fprintf(stderr, "Search time :  %f\n", search_time);
            fprintf(stderr, "Unknown words :  %d\n", num_unknown);
        }
    }

    htable_free(h);        
    free(h);

    return EXIT_SUCCESS;
}
