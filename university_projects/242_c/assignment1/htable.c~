#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "mylib.h"
#include "htable.h"
#include "container.h"


struct htablerec {
    int capacity;
    container *containers;
    container_t type;
};
static unsigned int htable_word_to_int(char *word) {
    unsigned int result = 0;
    while (*word != '\0') {
        result = (*word++ + 31 * result);
    }
    return result;
}
htable htable_new(int capacity, container_t type){
    int i;
    htable result = emalloc(sizeof *result);
    result->capacity = capacity;
    result->containers =
        emalloc(result->capacity * sizeof result->containers[0]);
    for(i=0;i<result->capacity;i++){
        if(type == RED_BLACK_TREE){
            result->containers[i] = container_new(RED_BLACK_TREE);
        }else{
            result->containers[i] = container_new(FLEX_ARRAY);
        }
    }
    return result;
}
void htable_free(htable h){
    int i;
    for(i=0;i<h->capacity;i++){
        container_free(h->containers[i]);
    }
    free(h->containers);
}
void htable_insert(htable h, char *word){
    int hash_index = htable_word_to_int(word)%h->capacity;
    container_add(h->containers[hash_index], word);
}
void htable_print(htable h){
    int i;
    for(i=0;i<h->capacity;i++){
        container_print(h->containers[i]);
    }
}
int htable_search(htable h, char *key){
    int hash_index = htable_word_to_int(key)%h->capacity;
    if(h->containers[hash_index] == NULL){
        return 0;
    }else{
        return container_search(h->containers[hash_index], key);
    }
}
