#include <stdio.h>
#include <stdlib.h>
#include "container.h"
#include "mylib.h"
#include "flexarray.h"
#include "rbt.h"

/**
 * Struct for a container.
 * Holds a pointer to either a rbt or a flexarray.
 * Also stores whether it points to an rbt or a flexarray.
 *
 */
struct containerrec {
    container_t type;
    void *contents;
};

/**
 * A printing function to feed into container traversal methods.
 *
 * @param str the string to print
 */
void print_func(char *str){
    fprintf(stdout, "%s ", str);
}

/**
 * Creates a new container.
 * Can be either a flexarray(type: FLEX_ARRAY) or
 * red-black tress (type: RED_BLACK_TREE).
 *
 * @param type the type of the container.
 * @return result the container.
 */
container container_new(container_t type){
    container result = emalloc(sizeof *result);
    result->type = type;
    if(type == RED_BLACK_TREE){
        result->contents = rbt_new();
    }else{
        result->contents = flexarray_new();
    }
    return result;
}

/**
 * Adds a word to the container.
 *
 * @param c the container to add the word to.
 * @param word the string to add to the container.
 */
void container_add(container c, char *word){
    if(c->type == RED_BLACK_TREE){
        c->contents = rbt_insert(c->contents, word);
    }else{
        flexarray_append(c->contents, word);
    }
}

/**
 * A method to free memory associated with the container.
 *
 * @param c the container to free.
 */
void container_free(container c){
    if(c->type == RED_BLACK_TREE){
        c->contents = rbt_free(c->contents);
    }else{
        flexarray_free(c->contents);
    }
    free(c);
}

/**
 * A method to search the container for a given word.
 *
 * @param c the container to search.
 * @param word the string to search for.
 * @return int 0 for not present, 1 for present.
 */
int container_search(container c, char *word){
    if(c->type == RED_BLACK_TREE){
        return rbt_search(c->contents, word);
    }
    return flexarray_is_present(c->contents, word);
}

/**
 * A method to print all the items in a container.
 * Contents of each container are printed on their own line.
 *
 * @param c the container to print.
 */
void container_print(container c, int i){
    if(c->type == RED_BLACK_TREE){
        if(rbt_is_null(c->contents) == 0){
            /*may have to change the traversal order*/
            fprintf(stdout, "%d\t", i);  
            rbt_preorder(c->contents, print_func);
            fprintf(stdout, "\n");
        }
    }else{
        if(flexarray_is_empty(c->contents) == 0){
            fprintf(stdout, "%d\t", i); 
            flexarray_visit(c->contents, print_func);
            fprintf(stdout, "\n");
        }
    }
}




